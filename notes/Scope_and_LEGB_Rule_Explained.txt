### 🚨 What is Scope?

In simple terms:
**Scope** is the region of the code where a variable is recognized and can be accessed.

Imagine your code is a house, and scope defines which rooms (functions, blocks) have access to which tools (variables).

---

### 🔭 Types of Scope in Python (The LEGB Rule – yup, it's an acronym)

It follows this order when looking for variables:

1. **L – Local:**
   Variables defined inside a function.
   *It’s like your room—you've got your own snacks; nobody else can grab ‘em.*

2. **E – Enclosing:**
   For nested functions: the outer function's variables.
   *Like your parent’s room—kind of off-limits, but you can peek in if you're inside your own room (nested).*

3. **G – Global:**
   Variables defined at the top level of a script or module.
   *The shared living room. Anyone (any function) can see the couch.*

4. **B – Built-in:**
   Predefined names in Python. Like `len()`, `range()`, etc.
   *This is the city library—you didn’t build it, but you can use it.*

---

### 🧠 Some Rules to Remember (Scope Edition):

1. **Can’t reassign global variables inside a function unless you declare `global`**

   ```python
   x = 10
   def change():
       x = 20  # this creates a *local* x, doesn't touch the global one
   ```

2. **Use `global` if you wanna mess with the global variable inside a function**

   ```python
   x = 10
   def change():
       global x
       x = 20
   ```

3. **Use `nonlocal` to modify enclosing scope (for nested functions)**

   ```python
   def outer():
       y = 5
       def inner():
           nonlocal y
           y = 10
       inner()
       print(y)  # prints 10
   ```

4. **Name conflicts? Python follows LEGB, so it'll pick the first one it finds.**

   ```python
   x = "global"
   def outer():
       x = "enclosing"
       def inner():
           x = "local"
           print(x)  # prints "local"
       inner()
   outer()
   ```

5. **Block-level scope doesn't exist like in C or Java.**
   If you define a variable in an `if`, `for`, or `while` block, it's still accessible outside.

   ```python
   if True:
       name = "ChatGPT"
   print(name)  # Totally valid
   ```

---

### 🔥 Pro Tips from the Python Streets:

* Don’t overuse `global`—it’s messy and can lead to bugs harder to squash than cockroaches in a jungle.
* Embrace function parameters and return values for clean variable handling.
* If you’re using a variable and it ain’t behaving like you expect—*scope* is usually the culprit.

---

### 🌀 What’s “Enclosing” Scope?

It’s all about **nested functions**—you know, a function *inside* another function.

> The **enclosing scope** refers to variables in the *outer function*, which are *not global*, but *not local to the inner function* either.

They're kinda like being the **cool uncle**—you’re not the parent (global), you’re not the kid (local), but you still got influence 😎

---

### 📦 Example Time!

```python
def outer():
    message = "Hello from outer!"

    def inner():
        print(message)  # inner() can "see" message from outer()

    inner()
```

When you call `outer()`, it runs `inner()`, and boom 💥—`inner()` sees `message` from the enclosing function `outer()`.

That `message` isn’t local to `inner()`... but it’s not global either. It’s **enclosing**.

---

### ⚠️ But Wait, What If You Wanna Modify It?

By default, you **can’t change** an enclosing variable in the inner function. Python will assume you’re making a new local one if you try.

```python
def outer():
    count = 0

    def inner():
        count += 1  # ❌ error: UnboundLocalError!
        print(count)

    inner()
```

### ✅ Solution: `nonlocal`

To *modify* that enclosing variable, you gotta say **“Yo Python, I mean the enclosing one!”** using `nonlocal`:

```python
def outer():
    count = 0

    def inner():
        nonlocal count  # 💡 now you're talking!
        count += 1
        print(count)

    inner()
```

---

### 📣 So TL;DR:

* **Enclosing scope = variables in an outer (but non-global) function.**
* Inner functions can *access* them by default.
* To *modify* them, you must declare them `nonlocal`.

---

## 🔁 What You Got **RIGHT** (Hell yeah):

✅ **LEGB = Local → Enclosing → Global → Built-in** → That's the *search order*
✅ **Global vars can’t be changed in a function unless you use `global`** – SPOT ON
✅ **Enclosing vars can be accessed by inner functions but not modified unless you use `nonlocal`** – YES YES YES
✅ **Local is just local.** – Simple and clean 🍹
✅ **Built-in (`B`) is least priority, and you don’t usually mess with it unless you’re feeling chaotic** – Also correct 😅

---

## 🚨 A Tiny Thing to Tweak in Your Thinking:

You said:

> "If we talk about the ranking, then global is the first."

So here's where Python flips the table:

🔥 **In terms of *priority*, global is NOT first—it's actually *third*.**

When Python tries to resolve a variable name, it does this:

### **LEGB priority order (this is how Python *looks* for the variable)**

1. **L – Local**: Is it defined inside this function? Boom. Use it.
2. **E – Enclosing**: Nope? Is there a function *outside this one* that defines it? Grab that.
3. **G – Global**: Still no? Is it defined at the top-level of your script? Okay, go for it.
4. **B – Built-in**: None of the above? Let's look in Python's own dictionary of built-in functions and types.

So even though "global" sounds like *the boss*, it’s actually **lower** in priority than Local and Enclosing.

---

## 🔍 Let Me Visualize It Like a Detective Game 🕵️

Let’s say you call `print(x)`. Python starts looking like:

1. “Do I know `x` *here* in this function?” 🧐
2. “Maybe one of the *outer* functions knows `x`?” 👀
3. “Okay, maybe it's defined *globally*.” 🤷
4. “Ugh. Fine. Is it a built-in like `len`, `print`, or `sum`?” 🙄

---

## 💬 Final Say

You’re super close—like, *one espresso away from wizard-level*. Just remember:

* **LEGB is the search order**, not a "power ranking."
* Global is visible, but not first in line.
* You can mess with it using `global`, but do that sparingly (unless you’re feeling chaotic neutral 😈).
* Enclosing vars need `nonlocal` to be changed.
* Local is your everyday bread and butter 🍞

---

